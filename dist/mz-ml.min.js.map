{
  "version": 3,
  "sources": ["../src/core/linear-regression.ts", "../src/index.ts"],
  "sourcesContent": ["class LinearRegression {\n    private readonly learningRate: number;\n    private readonly iterations: number;\n    private theta0: number;\n    private theta1: number;\n\n    constructor(learningRate: number, iterations: number) {\n        this.learningRate = learningRate;\n        this.iterations = iterations;\n        this.theta0 = 0;\n        this.theta1 = 0;\n    }\n\n    train(x: number[], y: number[]) {\n        const n = x.length;\n        for (let iter = 0; iter < this.iterations; iter++) {\n            let theta0Sum = 0;\n            let theta1Sum = 0;\n            for (let i = 0; i < n; i++) {\n                const prediction = this.predict(x[i]);\n                const error = prediction - y[i];\n                theta0Sum += error;\n                theta1Sum += error * x[i];\n            }\n            const theta0Gradient = (2 / n) * theta0Sum;\n            const theta1Gradient = (2 / n) * theta1Sum;\n            this.theta0 -= this.learningRate * theta0Gradient;\n            this.theta1 -= this.learningRate * theta1Gradient;\n        }\n    }\n\n    predict(x: number): number {\n        return this.theta0 + this.theta1 * x;\n    }\n\n    getTheta0(): number {\n        return this.theta0;\n    }\n\n    getTheta1(): number {\n        return this.theta1;\n    }\n}\n\n// Example usage\nconst regression = new LinearRegression(0.01, 1000);\nconst x = [1, 2, 3, 4, 5];\nconst y = [2, 4, 5, 4, 5];\nregression.train(x, y);\nconsole.log('Theta0:', regression.getTheta0());\nconsole.log('Theta1:', regression.getTheta1());\nconsole.log('Prediction for x=6:', regression.predict(6));", "import * as LinearRegression from './core/linear-regression';\n\nconst api = {\n    ...LinearRegression,\n};\n\ndeclare global {\n    interface Window {\n        mzMl: typeof api,\n    }\n}\n\nwindow.mzMl = window.mzMl || api;\n\nexport * from './core/linear-regression';"],
  "mappings": ";;;;;;mZAAA,IAAAA,EAAA,GAAA,IAAMC,EAAN,KAAuB,CAMnB,YAAYC,EAAsBC,EAAoB,CALtDC,EAAA,KAAiB,gBACjBA,EAAA,KAAiB,cACjBA,EAAA,KAAQ,UACRA,EAAA,KAAQ,UAGJ,KAAK,aAAeF,EACpB,KAAK,WAAaC,EAClB,KAAK,OAAS,EACd,KAAK,OAAS,CAClB,CAEA,MAAME,EAAaC,EAAa,CAC5B,IAAMC,EAAIF,EAAE,OACZ,QAASG,EAAO,EAAGA,EAAO,KAAK,WAAYA,IAAQ,CAC/C,IAAIC,EAAY,EACZC,EAAY,EAChB,QAASC,EAAI,EAAGA,EAAIJ,EAAGI,IAAK,CAExB,IAAMC,EADa,KAAK,QAAQP,EAAEM,CAAC,CAAC,EACTL,EAAEK,CAAC,EAC9BF,GAAaG,EACbF,GAAaE,EAAQP,EAAEM,CAAC,CAC5B,CACA,IAAME,EAAkB,EAAIN,EAAKE,EAC3BK,EAAkB,EAAIP,EAAKG,EACjC,KAAK,QAAU,KAAK,aAAeG,EACnC,KAAK,QAAU,KAAK,aAAeC,CACvC,CACJ,CAEA,QAAQT,EAAmB,CACvB,OAAO,KAAK,OAAS,KAAK,OAASA,CACvC,CAEA,WAAoB,CAChB,OAAO,KAAK,MAChB,CAEA,WAAoB,CAChB,OAAO,KAAK,MAChB,CACJ,EAGMU,EAAa,IAAId,EAAiB,IAAM,GAAI,EAC5CI,EAAI,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,EAClBC,EAAI,CAAC,EAAG,EAAG,EAAG,EAAG,CAAC,EACxBS,EAAW,MAAMV,EAAGC,CAAC,EACrB,QAAQ,IAAI,UAAWS,EAAW,UAAU,CAAC,EAC7C,QAAQ,IAAI,UAAWA,EAAW,UAAU,CAAC,EAC7C,QAAQ,IAAI,sBAAuBA,EAAW,QAAQ,CAAC,CAAC,ECjDxD,IAAMC,EAAMC,EAAA,GACLC,GASP,OAAO,KAAO,OAAO,MAAQF",
  "names": ["linear_regression_exports", "LinearRegression", "learningRate", "iterations", "__publicField", "x", "y", "n", "iter", "theta0Sum", "theta1Sum", "i", "error", "theta0Gradient", "theta1Gradient", "regression", "api", "__spreadValues", "linear_regression_exports"]
}
