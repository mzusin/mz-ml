/* 
mzMl v1.0.0
A collection of TypeScript-based ML helpers.
https://github.com/mzusin/mz-ml
Copyright (c) 2023-present, Miriam Zusin          
*/
(()=>{var x=Object.defineProperty,R=Object.defineProperties;var y=Object.getOwnPropertyDescriptors;var T=Object.getOwnPropertySymbols;var D=Object.prototype.hasOwnProperty,E=Object.prototype.propertyIsEnumerable;var S=Math.pow,d=(i,t,e)=>t in i?x(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e,p=(i,t)=>{for(var e in t||(t={}))D.call(t,e)&&d(i,e,t[e]);if(T)for(var e of T(t))E.call(t,e)&&d(i,e,t[e]);return i},M=(i,t)=>R(i,y(t));var g=(i,t)=>{for(var e in t)x(i,e,{get:t[e],enumerable:!0})};var u=(i,t,e)=>(d(i,typeof t!="symbol"?t+"":t,e),e);var z={};g(z,{LinearRegression:()=>c});var c=class{constructor(t){u(this,"options");u(this,"weights");u(this,"bias");u(this,"features");u(this,"labels");u(this,"featuresSize");u(this,"batchSize");u(this,"pearson",()=>{if(this.features.length<=0||this.labels.length<=0)return[];let t=[],e=this.labels.reduce((s,r)=>s+r,0)/this.labels.length;for(let s=0;s<this.featuresSize;s++){let r=0,n=0,l=0,a=this.features.map(o=>o[s]),h=a.reduce((o,f)=>o+f,0)/a.length;for(let o=0;o<this.features.length;o++){let f=this.features[o][s],b=this.labels[o];r+=(f-h)*(b-e),n+=S(f-h,2),l+=S(b-e,2)}t.push(n===0||l===0?0:r/Math.sqrt(n*l))}return t});var e;if(this.options=t,this.features=JSON.parse(JSON.stringify(this.options.features)),this.labels=JSON.parse(JSON.stringify(this.options.labels)),this.featuresSize=this.features.length>0?this.features[0].length:0,!this.validateInput())throw new Error("The input is not valid. Number of features should match the number of labels, and all features should have the same size.");this.weights=c.initZeroArray(this.featuresSize),this.bias=0,this.batchSize=(e=this.options.batchSize)!=null?e:this.features.length}validateInput(){if(this.features.length<=0||this.features.length!==this.labels.length)return!1;let t=this.features[0].length;for(let e of this.features)if(e.length!==t)return!1;return!0}static initZeroArray(t){let e=[];return e.length=t,e.fill(0),e}shuffle(){let t=[];for(let e=0;e<this.featuresSize;e++)t.push(e);for(let e=this.features.length-1;e>0;e--){let s=Math.floor(Math.random()*(e+1));[t[e],t[s]]=[t[s],t[e]]}for(let e=this.features.length-1;e>0;e--)[this.features[e],this.features[t[e]]]=[this.features[t[e]],this.features[e]],[this.labels[e],this.labels[t[e]]]=[this.labels[t[e]],this.labels[e]]}gradientDescent(t,e){let s=c.initZeroArray(this.featuresSize),r=0;for(let a=0;a<t.length;a++){let h=t[a],o=e[a],f=this.predict(h),b=o-f;for(let m=0;m<this.featuresSize;m++)s[m]+=-2*h[m]*b;r+=-2*b}let n=[];for(let a=0;a<this.weights.length;a++){let o=this.weights[a]-this.options.learningRate/this.batchSize*s[a];n.push(o)}let l=this.bias-this.options.learningRate/this.batchSize*r;return[n,l]}fit(){let t=performance.now();for(let e=0;e<this.options.epochs;e++){this.options.shuffle&&this.shuffle();for(let s=0;s<this.features.length;s+=this.batchSize){let r=this.features.slice(s,s+this.batchSize),n=this.labels.slice(s,s+this.batchSize),[l,a]=this.gradientDescent(r,n);if(typeof this.options.epochsCallback=="function"){let h=performance.now();this.options.epochsCallback({epoch:e,epochsCount:this.options.epochs,newWeights:l,newBias:a,time:h-t})}this.weights=l,this.bias=a}}return[this.weights,this.bias]}predict(t,e){if(t.length!==this.weights.length)throw new Error("Number of features does not match the number of weights.");let s=performance.now(),r=this.bias;for(let n=0;n<t.length;n++)r+=t[n]*this.weights[n];return e&&console.log(`Prediction = ${r}, ${performance.now()-s} ms`),r}predictBatch(t,e){let s=[],r=performance.now();for(let n of t)s.push(this.predict(n));return e&&console.log(`Predictions = ${s}, ${performance.now()-r} ms`),s}rSquared(){let t=0,e=0,s=this.labels.length<=0?0:this.labels.reduce((r,n)=>r+n)/this.labels.length;for(let r=0;r<this.features.length;r++){let n=this.labels[r],l=this.predict(this.features[r]);t+=S(n-l,2),e+=S(n-s,2)}return 1-t/e}meanSquaredError(){if(this.features.length<=0)return 0;let t=0;for(let e=0;e<this.features.length;e++){let s=this.labels[e],r=this.predict(this.features[e]);t+=S(s-r,2)}return t/=this.features.length,t}};var v={};g(v,{SimpleLinearRegression:()=>w});var w=class extends c{constructor(t){let e=[];for(let r of t.features)e.push([r]);let s=M(p({},t),{features:e});super(s)}};var O={};g(O,{splitData:()=>L});var L=i=>{var I;let t=i.features.length;if(t<=0||t!==i.labels.length)throw new Error("Number of features does not match the number of labels.");if(i.testSetSize<0||i.testSetSize>1)throw new Error("testSetSize should be in the range (0, 1).");if(i.validationSetSize!==void 0){if(i.validationSetSize<0||i.validationSetSize>1)throw new Error("validationSetSize should be in the range (0, 1).");if(i.validationSetSize+i.testSetSize>1)throw new Error("Sum of testSetSize and validationSetSize should not exceed 1.")}let e=(I=i.validationSetSize)!=null?I:0,s=i.testSetSize,r=Math.round(t*e),n=Math.round(t*s),l=t-r-n,a=i.features.slice(0,l),h=i.labels.slice(0,l),o=l+n,f=i.features.slice(l,o),b=i.labels.slice(l,o),m=r<=0?[]:i.features.slice(o),V=r<=0?[]:i.labels.slice(o);return{featuresTrain:a,featuresTest:f,featuresValidation:m,labelsTrain:h,labelsTest:b,labelsValidation:V}};var N=p(p(p({},z),v),O);window.mzMl=window.mzMl||N;})();
//# sourceMappingURL=mz-ml.min.js.map
